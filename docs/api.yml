openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD21101
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Visitors

paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDate
          description: Filter books by release date after this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: Filter books by release date before this date
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          $ref: '#/components/responses/200Books'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/responses/200Books'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      summary: Update a Book's Author By Id
      operationId: UpdateAuthorFromABookById
      parameters:
        - name: BookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/200Books'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
              
  /books/authors:
    put:
      tags:
        - "Books" 
      summary: Update Book Authors
      operationId: UpdateBookAuthors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          $ref: '#/components/responses/200Books'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/import:
    post:
      tags:
        - "Books"
      summary: Import Books From Excel or JSON
      operationId: importBook
      requestBody:
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/ImportBook"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema: 
              $ref: "#/components/schemas/ImportBook"
        required: true
      responses:
        200:
          $ref: '#/components/responses/200Books'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/borrowed:
    get:
      tags:
        - "Books"
      summary: Get Borrowed Books
      operationId: getBorrowedBooks
      responses:
        200:
          $ref: '#/components/responses/200Books'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/available:
    get: 
      tags:
        - "Books"   
      summary: Get Available Books
      operationId: getAvailableBooks
      responses:
        200:
          $ref: '#/components/responses/200Books'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

    
  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by given name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          $ref: '#/components/responses/200Authors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - "Authors"
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/200Authors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/{aId}:
    delete:
      tags:
        - "Authors"
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - name: aId
          in: path
          description: Author Identifier to be related
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/200Authors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/page/{page}/size/{size}:
    get:
      tags:
          - "Authors"
      parameters:
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          $ref: '#/components/responses/200Authors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/import:
    post:
      tags:
        - "Authors"
      summary: Import Authors From Excel or JSON
      operationId: importAuthor
      requestBody:
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/ImportAuthor"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: "#/components/schemas/ImportAuthor"
        required: true
      responses:
        200:
          $ref: '#/components/responses/200Authors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors:
    get:
      tags:
        - "Visitors"
      summary: Get All Visitors
      operationId: getVisitors
      parameters:
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          $ref: '#/components/responses/200Visitors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - "Visitors"
      summary: Create or Update a list of Visitors 
      operationId: crupdateVisitors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          $ref: '#/components/responses/200Visitors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors/{visitorId}/borrow:
    put:
      tags:
        - "Visitors"
      summary: Borrow a Book
      operationId: borrowBook
      parameters:
        - name: visitorId
          in: path
          schema: 
            type: string
          required: true
        - name: bookId
          in: query
          schema: 
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/200Visitors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors/{visitorId}/return:
    put:
      tags:
        - "Visitors"
      summary: Return a Book
      operationId: returnBook
      parameters:
        - name: visitorId
          in: path
          schema: 
            type: string
          required: true
        - name: bookId
          in: query
          schema: 
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/200Visitors'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

                 
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        Sex: 
          $ref: "#/components/schemas/Sex"
    Sex:
      type: string
      enum:
        - M
        - F
    CrupdateBooks:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBooks"
      properties:
        author:
          $ref: "#/components/schemas/Author"
          type: string
        isBorrowed:
          type: boolean
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    DefaultResponseSchema:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
        body:
          type: object
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestE:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad Request
    NotAuthorizedE:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedE
        message: Not Authorized 
    InternalServerE:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerE
        message: Internal Server Error
    ImportAuthorExcel:
      $ref: "#/components/schemas/Author"
    ImportAuthorJSON:
      $ref: "#/components/schemas/Author"
    ImportBookExcel:
      $ref: "#/components/schemas/Book"
    ImportBookJSON:
      $ref: "#/components/schemas/Book"
    ImportAuthor: 
      oneOf:
        - $ref: "#/components/schemas/ImportAuthorExcel"
        - $ref: "#/components/schemas/ImportAuthorJSON"
    ImportBook:
      oneOf:
        - $ref: "#/components/schemas/ImportBookExcel"
        - $ref: "#/components/schemas/ImportBookJSON"
    Visitors:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        reference:
          type: string
    VisitorActivity:
      type: object
      properties:
        visitorId:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        borrowedBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        returnedBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book'

  responses:
    200Books:
      description: Successfull Operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Book'
    200Authors:
      description: Successfull Operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Author'
    200Visitors:
      description: Successfull Operation
      content:
        application/json:
          schema: 
            type: array
            items:
              $ref: '#/components/schemas/Visitors'
    200VisitorActivities:
      description: Successfull Operation
      content:
        application/json:
          schema: 
            type: array
            items: 
              $ref: '#/components/schemas/VisitorActivity'
    400:
      description: Bad Request
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/BadRequestE'
    403:
      description: Forbidden
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/NotAuthorizedE'
    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerE'
  parameters:
    queryPagination:
      in: query
      name: queryPagination
      description: page number and page size
      required: false 
      schema:
          type: object
          properties:
            page:
              type: integer
              default: 1
            pageSize:
              type: integer
              default: 50
    pathPagination:
      in: path
      name: pathPagination
      description: page number and page size
      required: true
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
      